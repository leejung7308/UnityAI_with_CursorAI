# Burger Please! 게임 모작 기획서 (PRD)

## 1. 프로젝트 개요

### 1.1 프로젝트명
**Burger Please! - Unity 모작 버전**

### 1.2 프로젝트 목표
슈퍼센트의 인기 모바일 게임 "Burger Please!"를 Unity 엔진을 사용하여 PC/모바일 크로스 플랫폼으로 재구현하는 프로젝트입니다.

### 1.3 타겟 플랫폼
- **주 플랫폼**: PC (Windows, macOS)
- **부 플랫폼**: 모바일 (Android, iOS)
- **개발 환경**: Unity 6000.2.0f13 + Unity AI

### 1.4 개발 기간
- **총 개발 기간**: 2주 (데모 수준)
- **1주차**: 핵심 시스템 구현 및 기본 게임플레이
- **2주차**: 완성도 향상 및 데모 준비

## 2. 게임 개요

### 2.1 게임 장르
- **주 장르**: 레스토랑 경영 시뮬레이션
- **부 장르**: 퍼즐, 시간 관리, 터치/클릭 액션

### 2.2 게임 컨셉
플레이어는 버거 가게의 주방장이 되어 고객들의 주문을 받아 맛있는 버거를 만들어 제공하는 게임입니다. 시간 제한과 다중 주문 처리를 통해 긴장감을 조성하며, 점진적인 업그레이드 시스템으로 장기적인 몰입을 유도합니다.

### 2.3 핵심 게임플레이 루프
1. **주문 접수** → 고객이 들어와서 버거 주문
2. **재료 준비** → 필요한 재료들을 선택하고 준비
3. **버거 조립** → 레시피에 따라 재료를 순서대로 쌓기
4. **서빙** → 완성된 버거를 고객에게 제공
5. **보상 획득** → 성공적인 서빙으로 돈과 경험치 획득
6. **업그레이드** → 획득한 자원으로 가게와 장비 개선

## 3. 상세 게임 시스템

### 3.1 주문 시스템
- **주문 표시**: 화면 상단에 대기 중인 주문들이 카드 형태로 표시
- **시간 제한**: 각 주문마다 제한 시간이 있으며, 초과 시 고객이 떠남
- **주문 복잡도**: 단순한 버거부터 복잡한 특별 주문까지 단계별 증가
- **우선순위**: VIP 고객이나 특별 주문은 우선 처리 필요

### 3.2 재료 시스템
- **기본 재료**: 빵, 패티, 치즈, 양상추, 토마토, 양파
- **특별 재료**: 베이컨, 계란, 아보카도, 특별 소스
- **재료 품질**: 신선도에 따른 보너스 점수 시스템
- **재고 관리**: 재료 소진 시 구매 필요

### 3.3 조립 시스템
- **드래그 앤 드롭**: 마우스/터치로 재료를 드래그하여 조립
- **순서 중요**: 레시피에 맞는 정확한 순서로 재료 배치
- **시각적 피드백**: 올바른/잘못된 배치에 대한 즉각적인 피드백
- **콤보 시스템**: 연속 성공 시 보너스 점수

### 3.4 고객 시스템
- **고객 유형**: 일반 고객, VIP 고객, 특별 이벤트 고객
- **만족도 시스템**: 서빙 속도, 정확성에 따른 만족도 평가
- **팁 시스템**: 높은 만족도 시 추가 팁 제공
- **고객 반응**: 만족/불만족에 따른 시각적/청각적 피드백

### 3.5 경제 시스템
- **수익**: 성공적인 주문 완료 시 수익 획득
- **비용**: 재료 구매, 장비 유지보수, 임대료
- **투자**: 수익을 통한 가게 확장 및 장비 업그레이드
- **재정 관리**: 수익과 비용의 균형을 통한 지속 가능한 운영

## 4. 진행 시스템

### 4.1 레벨 시스템
- **레벨 진행**: 경험치를 통한 레벨업
- **새로운 콘텐츠**: 레벨업 시 새로운 레시피, 재료, 고객 유형 해금
- **난이도 증가**: 레벨이 올라갈수록 주문 복잡도와 시간 압박 증가

### 4.2 업그레이드 시스템
- **장비 업그레이드**: 그릴, 냉장고, 조리 도구 개선
- **가게 확장**: 좌석 수 증가, 주방 공간 확장
- **직원 고용**: 주방 보조, 서빙 직원 고용
- **특별 기능**: 자동화 시스템, 특별 이벤트 해금

### 4.3 업적 시스템
- **일일 목표**: 매일 달성할 수 있는 작은 목표들
- **주간 도전**: 더 큰 규모의 주간 도전 과제
- **업적 배지**: 특정 조건 달성 시 획득하는 배지
- **통계 추적**: 총 수익, 완료한 주문 수, 만족도 등

## 5. 기술적 요구사항

### 5.1 Unity 시스템
- **Unity 버전**: 6000.2.0f13
- **Unity AI 활용**: 코드 생성, 애니메이션 생성, 텍스처 생성
- **렌더링 파이프라인**: URP (Universal Render Pipeline)
- **입력 시스템**: 새로운 Input System 사용
- **UI 시스템**: UI Toolkit 또는 uGUI
- **오디오**: Unity Audio System

### 5.2 핵심 시스템 아키텍처
- **게임 매니저**: 전체 게임 상태 관리
- **주문 매니저**: 주문 생성, 관리, 처리
- **재료 매니저**: 재료 상태, 재고 관리
- **고객 매니저**: 고객 생성, 행동 패턴 관리
- **경제 매니저**: 수익, 비용, 업그레이드 관리
- **UI 매니저**: 모든 UI 요소 관리
- **오디오 매니저**: 사운드 효과 및 배경음 관리

### 5.3 데이터 관리
- **Scriptable Objects**: 레시피, 재료, 고객 데이터
- **JSON 저장**: 게임 진행 상황 저장
- **PlayerPrefs**: 설정 및 간단한 데이터 저장

### 5.4 최적화 요구사항
- **프레임레이트**: 60 FPS 유지
- **메모리 사용량**: 모바일 기준 512MB 이하
- **로딩 시간**: 초기 로딩 3초 이하
- **배터리 효율성**: 모바일에서 장시간 플레이 가능

## 6. 아트 및 사운드

### 6.1 비주얼 스타일
- **아트 스타일**: 밝고 경쾌한 카툰 스타일
- **컬러 팔레트**: 따뜻한 색상 (빨강, 주황, 노랑 위주)
- **캐릭터 디자인**: 귀엽고 친근한 캐릭터들
- **UI 디자인**: 깔끔하고 직관적인 인터페이스

### 6.2 애니메이션
- **캐릭터 애니메이션**: 고객의 감정 표현, 주방장 동작
- **UI 애니메이션**: 부드러운 전환 효과
- **게임플레이 애니메이션**: 재료 조립, 조리 과정
- **피드백 애니메이션**: 성공/실패 시각적 피드백

### 6.3 사운드 디자인
- **배경음악**: 경쾌하고 활기찬 레스토랑 분위기
- **효과음**: 조리, 서빙, 고객 반응 사운드
- **UI 사운드**: 버튼 클릭, 메뉴 전환 사운드
- **환경음**: 레스토랑 배경 소음

## 7. UI/UX 설계

### 7.1 메인 게임 화면
- **상단 UI**: 주문 대기열, 시간, 점수
- **중앙 영역**: 주방 작업 공간
- **하단 UI**: 재료 선택, 도구 선택
- **측면 UI**: 가게 정보, 업그레이드 버튼

### 7.2 메뉴 시스템
- **메인 메뉴**: 게임 시작, 설정, 업적
- **일시정지 메뉴**: 게임 재개, 메인 메뉴로 돌아가기
- **업그레이드 메뉴**: 장비, 가게, 직원 업그레이드
- **설정 메뉴**: 사운드, 그래픽, 게임플레이 설정

### 7.3 사용자 경험
- **직관적 조작**: 드래그 앤 드롭으로 쉬운 조작
- **즉각적 피드백**: 모든 액션에 대한 시각적/청각적 피드백
- **학습 곡선**: 단계별로 복잡도 증가
- **접근성**: 다양한 플레이어를 위한 옵션 제공

## 8. 개발 일정 (Unity AI 활용)

### 8.1 1주차: 핵심 시스템 구현 및 기본 게임플레이
- **Day 1-2**: Unity 6000.2.0f13 프로젝트 설정, Unity AI 활용한 기본 시스템 구조 생성
- **Day 3-4**: Unity AI를 활용한 주문 시스템 및 기본 조립 메커니즘 구현
- **Day 5-7**: Unity AI 활용한 고객 시스템, 기본 UI, 경제 시스템 구현

### 8.2 2주차: 완성도 향상 및 데모 준비
- **Day 8-10**: Unity AI 활용한 사운드, 애니메이션, 시각 효과 추가
- **Day 11-12**: UI/UX 개선, 게임 밸런싱, Unity AI 활용한 최적화
- **Day 13-14**: 데모 준비, 최종 테스트, 폴리싱

## 9. 성공 지표

### 9.1 기술적 지표
- **성능**: 60 FPS 안정적 유지
- **안정성**: 크래시 없는 안정적인 실행
- **호환성**: 다양한 디바이스에서 정상 작동

### 9.2 게임플레이 지표
- **재미도**: 플레이테스트 참가자 만족도 80% 이상
- **몰입도**: 평균 세션 시간 15분 이상
- **재방문율**: 일일 활성 사용자 70% 이상

### 9.3 비즈니스 지표
- **완성도**: 원본 게임의 핵심 요소 90% 이상 구현
- **확장성**: 향후 콘텐츠 추가 가능한 구조
- **유지보수성**: 코드 품질 및 문서화 수준

## 10. 리스크 관리

### 10.1 기술적 리스크
- **성능 이슈**: 모바일 최적화 실패
- **호환성 문제**: 다양한 디바이스에서의 문제
- **기술 부채**: 빠른 개발로 인한 코드 품질 저하

### 10.2 게임플레이 리스크
- **밸런싱 실패**: 너무 쉬우거나 어려운 난이도
- **반복성**: 게임플레이의 단조로움
- **학습 곡선**: 너무 복잡한 시스템

### 10.3 일정 리스크
- **개발 지연**: 예상보다 복잡한 기능 구현
- **리소스 부족**: 아트, 사운드 자원 부족
- **테스트 부족**: 충분한 플레이테스트 시간 부족

## 11. Unity AI 활용 전략

### 11.1 Unity AI 활용 방안
- **코드 생성**: Unity AI를 활용하여 반복적인 코딩 작업 자동화
- **애니메이션 생성**: Unity AI의 애니메이션 생성 기능으로 빠른 캐릭터 애니메이션 제작
- **텍스처 생성**: Unity AI의 텍스처 생성으로 빠른 아트 자산 제작
- **프로토타이핑**: Unity AI의 빠른 프로토타이핑 기능으로 아이디어 검증

### 11.2 개발 효율성 향상
- **자동화된 워크플로우**: Unity AI의 자동화 기능으로 개발 속도 향상
- **스마트 에디터**: Unity AI의 스마트 에디터 기능으로 코드 작성 및 디버깅 효율성 증대
- **실시간 피드백**: Unity AI의 실시간 피드백으로 빠른 반복 개발

## 12. 결론

이 기획서는 Unity 6000.2.0f13과 Unity AI를 활용하여 2주 안에 "Burger Please!" 게임의 데모 버전을 완성하기 위한 로드맵을 제시합니다. Unity AI의 강력한 기능들을 최대한 활용하여 빠른 프로토타입 개발에 집중하는 것이 핵심입니다.

성공적인 데모 개발을 위해서는 Unity AI의 자동화 기능을 적극 활용하고, 핵심 게임플레이에 집중하여 완성도 높은 데모를 만드는 것이 중요합니다. 특히 Unity AI의 코드 생성, 애니메이션 생성, 텍스처 생성 기능을 활용하여 개발 시간을 단축하고 품질을 향상시켜야 합니다.

이 프로젝트는 Unity AI의 새로운 기능들을 체험하고, 빠른 게임 개발 워크플로우를 경험할 수 있는 훌륭한 기회가 될 것입니다.
